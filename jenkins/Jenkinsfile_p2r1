pipeline {
    agent any
    
    stages {
        stage('Get Code') {
            steps {
                echo 'Download git repository'
                git branch: 'develop', url: 'https://github.com/macunagutierrez/practica1a.git'
                echo WORKSPACE
                bat 'dir'
            } 
        }
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        python --version
                        python -m pytest --junitxml=result-unit.xml test/unit
                    '''
                }
            } 
        }
          stage('TEST integracion') {
            steps {
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        set FLASK_APP=app/api.py
                        start flask run
                        start java -jar C:\\unir\\programas\\wiremock-standalone-3.5.4.jar --port 9090 --root-dir test\\wiremock

                        python --version
                        python -m pytest --junitxml=result-rest.xml test/rest
                    '''
                    junit 'result*.xml'
            }
        }
          stage('STATIC') {
            steps {
                bat '''
                    flake8 --format=pylint --exit-zero app >flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold:8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]],unhealthy:10
            }
           
        }
          stage('SECURITY Test') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold:2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]],unhealthy:4
            }
           
        }
         stage('PERFORMANCE') {
            steps {
                
                bat 'C:\\Users\\miguel\\Desktop\\UNIR\\programas\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl'
                perfReport sourceDataFiles: 'flask.jtl'
            }
           
        }
          stage('Coverage') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                        coverage xml
                    '''
                }
                 catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                   cobertura coberturaReportFile: 'coverage.xml',onlyStable:false,failUnstable:false,conditionalCoverageTargets:'10,10,10', lineCoverageTargets:'100,85,95'
                }
            }
           
        }
       
    }
}
